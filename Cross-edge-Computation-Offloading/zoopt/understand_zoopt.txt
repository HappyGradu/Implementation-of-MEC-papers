## 包zoopt：
1. 包util定义了两个模块。分别是
【1】tool_function.py：定义了一个类ToolFunction，其中有一个静态方法log(text)，返回代码生成的日志；
【2】zoo_global.py：定义了一个类Global，该类的任意一个实例生成时有rand和precision两个随机生成的变量。亦可通过set方法设置这两个变量。
此外，该模块中定义了一个Global实例gl（显然是作为全局变量来用的），以及正无穷（inf），负无穷（-inf）和NaN。

2. dimension.py：描述整个解空间的所有要用到的信息。
该模块包含一个类Dimension，具有四个“应当被视为私有变量”的属性：
【1】size（维度），
【2】regs（每一维度的解的范围，[0,1]或{0,1}），
【3】tys（每一维度的类型：离散False or 连续True），
【4】order（是否具有偏序关系）。
该类有两个静态方法，分别是judge_mathch()和merge_dim()。第一个方法判断一个Dimension实例是否合法，即regs和tys的维数是否等于size；
第二个方法借助深复制将两个Dimension实例合并为一个更大的。
该类的方法还有：
【1】equal()：判断两个实例是否一致；
【2】set_all(), set_dimension_size(), set_region(), set_regions()；
【3】rand_sample()：根据每一个维度是连续还是离散，分别做uniform和randint取样，返回一个通过随机取样得到的可行解；
【4】limited_space()：判断Dimension实例是否是“全局离散的”（即每一个维度解空间都是离散的），若是，返回全局解空间的维度
（$\multi_{i \in M} |M_i|$）。
【5】deep_copy()：深复制本Dimension实例；
【6】copy_region()：深复制本Dimension实例的解空间；
【7】is_discrete()：判断本Dimension实例的全局解空间是否都是离散的；
【8】针对每一个属性自身的get和set方法；
【9】print_dim()：测试时打印一个Dimension实例的信息。

3. parameter.py：定义了一个类Parameter，该类描述了优化算法所用到的全部参数的设定。
初始化时的参数有：
【1】算法的选择：racos还是poss。即self.__algorithm。
【2】所有算法均具备的初始参数：self.__init_samples，self.__time_budget，self.__terminal_value。
【3】racos方法所具有的参数：是否要使用Sracos，即self.__sequential；精度、不确定bit的个数、训练集大小，正负集大小以及随机取样的概率（？）。
【4】处理中间结果参数、噪声以及帕累托优化的参数。
【5】Sracos的一系列参数。
除此之外，有一个自动设置参数默认值的方法auto_set()，根据已有的参数自动设定buget的数值。
最后是所有参数的get和set方法。

4. solution.py：定义了一个可行解类Solution。该类的实例具备一个向量形式描述的解以及一系列的相关信息（是否在possible solution set里面etc）。

5. objective.py：定义了优化目标类Objective。参数包含目标函数、解空间相关信息、约束条件、取样的方法。
包含以下方法：设置参数；构造可行解；根据定义的目标函数和某个解求得该解的目标函数值；再取样的方法；获取到目前为止最好的解。

6. opt.py和exp_opt.py的代码已经涉及到算法本身。

7. 包algos就是算法模块。包含三个子包。
7.1 包opt_algorithms：定义了最基本的算法。
----> 包paretoopt <----
【1】paretoopt.py：该模块定义了一个类ParetoOpt。该类有一个静态方法mutation，即按照概率将bit反转or not。
此外就是方法opt了。该方法实现了帕累托优化算法，根据输入的Objective和Parameter，反馈该优化算法的最优解。
【2】pareto_optimization.py：该模块是paretoopt.py中的类ParetoOpt的一个wrapper。在ParetoOpt外
加上了一层对噪声的判断。
---->   包racos   <----
【1】racos_classification.py：该模块定义了一个类RacosClassification，这是所有racos算法所采用的分类器。其中最关键的方法是mixed_classification，
该方法作用的结果就是：完成解集中所有解是pos还是neg的分类。该方法很周全，对于解空间中各个维度不一致（每个维度都可以是离散或连续的，可取的解也可以不一样）
这样的情况也能处理。但此处的具体实现仅仅是在rand.uniform()和rand.randint()之间切换。代码有很大的冗余。此外还有一些调试用的方法，例如打印出pos解集和neg解集。
【2】racos_common.py：顾名思义，该模块定义了一个类RacosCommon，容纳了Racos，SRacos以及SSRacos三种方法共同的属性和方法，是这三者的基类。
【3】racos.py：定义了类Racos，调用RacosClassification和RacosCommon实例，该类的方法opt实现了Racos算法。
【4】sracos.py：定义了类SRacos，调用RacosClassification和RacosCommon实例，该类的方法opt实现了SRacos算法。
【5】racos_optimization.py：该模块定义了RacosOptimization类，这是一个用户接口，其中的opt方法根据用户的参数输入选择生成Racos、SRacos或者SSRacos的实例。

7.2 包noise_handing：
定义了处理噪声的模块（即算法PONSS，应该是别人的论文里的或经典的方法，被拿来和SSRacos对比）；此外在SRacos的基础上完成SSRacos算法。

7.3 包high_dimensionality_handing：
定义了一个类SequentialRandomEmbedding，实现了论文里的同名算法。